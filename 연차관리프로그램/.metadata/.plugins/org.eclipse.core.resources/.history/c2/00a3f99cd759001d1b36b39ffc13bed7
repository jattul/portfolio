package com.naver.erp;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class BoardController {
	
	//----------------------------------------------
	// BoardDAO 인터페이스 구현한 클래스를 객체를 생성해 속성변수 boardDAO에 저장
	// BoardDAO 인터페이스 구현한 클래스를 찾을때 그 클래스의 이름은 무었이든 상관없다
	// 단 BoardDAO 인터페이스 구현한 클래스는 한개만 만들어야한다
	//<주의> 관용적으로 클래스 이름에 DAO가 들어있으면 직접 DB연동을 하는 메소드를 소유한 클래스이다
	//----------------------------------------------
	@Autowired
	private BoardDAO boardDAO;
	
	//----------------------------------------------
	// BoardService 인터페이스 구현한 클래스를 객체를 생성해 속성변수 BoardService에 저장
	// BoardService 인터페이스 구현한 클래스를 찾을때 그 클래스의 이름은 무었이든 상관없다
	// 단 BoardService 인터페이스 구현한 클래스는 한개만 만들어야한다
	//----------------------------------------------
	@Autowired
	private BoardService boardService;
	
	//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	// 가상주소 /boardList.do 로 접근하면 호출되는 메소드 선언
		// @RequestMapping 내부에, Method="RequestMethod.POST 가 없으므로
		// 가상주소 /boardList.do 로 접근 시 get 또는 post 방식 접근 모두 허용한다
	//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	@RequestMapping( value="/boardList.do" )
	public ModelAndView boardList() {
		// [ModelAndView 객체] 생성하기
		ModelAndView mav = new ModelAndView();
		
		//----------------------------
		// BoardDAOImpl객체의 getBoardList메소드 호출로 [게시판 목록] 얻기
		//----------------------------
		List<Map<String,String>> boardList = this.boardDAO.getBoardList();
		
		//----------------------------
		// [ModelAndView 객체]에 [게시판 목록 검색 결과]를 저장하기
		// [ModelAndView 객체]에 저장된 객체는 [HttpServletRequest 객체]에도 저장된다.
		//----------------------------
		mav.addObject("boardList",boardList);
		mav.addObject("boardTotCnt",boardList.size());
		
		mav.setViewName("boardList.jsp");
		
		// [ModelAndView 객체] 리턴하기
		// 저장된 [JSP페이지명]에 해당하는 [JSP페이지]를 호출한다
		return mav;
	}
	
	
	//가상주소 "/boardRegForm.do" 로 접근하면 호출되는 메소드 선언
	@RequestMapping( value="/boardRegForm.do" )
	public ModelAndView boardRegForm() {
		
		ModelAndView mav = new ModelAndView();
		mav.setViewName("boardRegForm.jsp");

		return mav;
	}
	
	
	
	@RequestMapping( 
			value="/boardRegProc.do" 
			,method=RequestMethod.POST
			,produces="application/json;charset=UTF-8"
	)
	@ResponseBody
	public int boardRegProc(
			// 파라미터값을 저장할 [BoardDTO객체]를 매개변수로 선언
				// [파라미터명]과 [BoardDTO객체]의 [속성변수명]이 같으면
				// setter 메소드가 작동되어 [파라미터값]이 [속성변수]에 저장된다
			BoardDTO boardDTO
		){
		// [BoardServiceImpl객체]의 insertBoard 메소드 호출로
		// 게시판 글 입력하고 [입력 적용행의 개수] 얻기
		int boardRegCnt = this.boardService.insertBoard(boardDTO);
		
		// [입력 적용행의 개수] 리턴
		return boardRegCnt;

	}
	
	
	// /boardDetailForm.do 접속 시 호출되는 메소드 선언
	@RequestMapping( value="/boardDetailForm.do" )
	public ModelAndView boardDetailForm(
		// b_no 라는 파라미터명의 파라미터값이 저장되는 매개변수 b_no 선언
		// 상세보기 할 게시판 고유번호가 들어오는 매개변수 선언
		@RequestParam(value="b_no") int b_no	
	) {
		//System.out.println("BoardController.boardDetailForm 메소드 호출 시작");
		
		// [BoardServiceImpl 객체]의 getBoard 메소드 호출로 [1개의 게시판 글]을 BoardDTO 객체에 담아오기
		BoardDTO boardDTO = this.boardService.getBoard(b_no,true); 
		
		
		ModelAndView mav = new ModelAndView();
		mav.setViewName("boardDetailForm.jsp");
		// ModelAndView객체에 1개의 게시판 글을 저장한 BoardDTO객체 저장하기
		mav.addObject("boardDTO",boardDTO);
		
		//System.out.println("BoardController.boardDetailForm 메소드 종료");
		
		return mav;
	}
	
	
	// /boardUpDelForm.do 접속 시 호출되는 메소드 선언
	@RequestMapping( value="/boardUpDelForm.do" )
	public ModelAndView boardUpDelForm(
		// b_no 라는 파라미터명의 파라미터값이 저장되는 매개변수 b_no 선언
		// 수정/삭제 할 게시판 고유번호가 들어오는 매개변수 선언 
		@RequestParam(value="b_no") int b_no
	) {
		
		// [BoardServiceImpl 객체]의 getBoard 메소드 호출로 [1개의 게시판 글]을 BoardDTO 객체에 담아오기
		BoardDTO boardDTO = this.boardService.getBoard(b_no,true); 
				
		ModelAndView mav = new ModelAndView();
		mav.setViewName("boardUpDelForm.jsp");
		// ModelAndView객체에 1개의 게시판 글을 저장한 BoardDTO객체 저장하기
		mav.addObject("boardDTO",boardDTO);
		
		return mav;
	}
	
	
	
	@RequestMapping( 
		value="/boardUpProc.do" 
		,method=RequestMethod.POST
		,produces="application/json;charset=UTF-8"
	)
		@ResponseBody
		public int boardUpProc(
			BoardDTO boardDTO	
		) {
		// BoardServiceImpl 객체의 updateBoard메소드 호출로 업데이트된 행의 개수얻기
		int updateBoardCnt = this.boardService.updateBoard(boardDTO);
		
		return updateBoardCnt;
	}
	
	
	@RequestMapping( 
		value="/boardDelProc.do" 
		,method=RequestMethod.POST
		,produces="application/json;charset=UTF-8"
	)
		@ResponseBody
		public int boardDelProc(
			BoardDTO boardDTO	
		) {
		

		// BoardServeImpl 객체의 deleteBoard 메소드 호출로 게시판글을 삭제하고 삭제된 행의 개수얻기
		int deleteBoardCnt = this.boardService.deleteBoard(boardDTO);
			
		return deleteBoardCnt;

	}
	
	
	
	
	
	
	
		
}
